# docker-compose.yml - DataLive Golden Path Edition
# Everything runs with `docker-compose up -d` - no additional steps required

services:
  # =============================================================================
  # Core Database Services
  # =============================================================================
  
  postgres:
    image: postgres:16-alpine
    container_name: datalive-postgres
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datalive-net

  neo4j:
    image: neo4j:5-community
    container_name: datalive-neo4j
    restart: unless-stopped
    env_file: .env
    environment:
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_server_https_enabled=false
      - NEO4J_server_http_enabled=true
      - NEO4J_server_http_listen__address=0.0.0.0:7474
      - NEO4J_server_config_strict__validation_enabled=false
    ports:
      - "7474:7474"   # HTTP
      - "7473:7473"   # HTTPS
      - "7687:7687"   # Bolt
    volumes:
      - neo4j-data:/data
      - ./init-automated-configs/neo4j/ssl:/ssl:ro
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:7474 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - datalive-net

  qdrant:
    image: qdrant/qdrant:latest
    container_name: datalive-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    # healthcheck:
    #   test: ["CMD-SHELL", "nc -z localhost 6333 || exit 1"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s
    networks:
      - datalive-net

  minio:
    image: minio/minio:latest
    container_name: datalive-minio
    restart: unless-stopped
    env_file: .env
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datalive-net

  # =============================================================================
  # AI & Processing Services
  # =============================================================================

  ollama:
    image: ollama/ollama:latest
    container_name: datalive-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    # healthcheck:
    #   test: ["CMD-SHELL", "nc -z localhost 11434 || exit 1"]
    #   interval: 30s
    #   timeout: 15s
    #   retries: 5
    #   start_period: 60s
    networks:
      - datalive-net

  # =============================================================================
  # Application Services
  # =============================================================================

  n8n:
    image: n8nio/n8n
    container_name: datalive-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    env_file: .env
    volumes:
      - n8n-data:/home/node/.n8n
      - ./datalive_agent/n8n_workflows:/workflows:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - datalive-net

  datalive_agent:
    build:
      context: ./datalive_agent
      dockerfile: Dockerfile
    container_name: datalive-agent
    restart: unless-stopped
    env_file: .env
    ports:
      - "${DATALIVE_AGENT_PORT:-8058}:8058"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_started
      minio:
        condition: service_healthy
      n8n:
        condition: service_healthy
      ollama:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8058/health')\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - datalive-net

  # =============================================================================
  # Initialization Sidecar Containers
  # =============================================================================

  # PostgreSQL Schema Initialization
  postgres-init:
    image: postgres:16-alpine
    container_name: datalive-postgres-init
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    volumes:
      - ./init-automated-configs/postgres:/scripts:ro
      - ./init-automated-configs/postgres/init.sql:/init/init.sql:ro
    command: /scripts/init.sh
    networks:
      - datalive-net

  # Neo4j Knowledge Graph Setup
  neo4j-init:
    image: alpine:latest
    container_name: datalive-neo4j-init
    depends_on:
      neo4j:
        condition: service_healthy
    env_file: .env
    volumes:
      - ./init-automated-configs/neo4j:/scripts:ro
    command: sh -c "apk add --no-cache curl && /scripts/setup.sh"
    networks:
      - datalive-net

  # Qdrant Vector Collections Setup
  qdrant-init:
    image: alpine:latest
    container_name: datalive-qdrant-init
    depends_on:
      qdrant:
        condition: service_started
    volumes:
      - ./init-automated-configs/qdrant:/scripts:ro
    command: sh -c "apk add --no-cache curl && /scripts/setup.sh"
    networks:
      - datalive-net

  # Ollama Model Download
  ollama-pull:
    image: ollama/ollama:latest
    container_name: datalive-ollama-pull
    depends_on:
      ollama:
        condition: service_started
    env_file: .env
    entrypoint: ["sh", "-c"]
    environment:
      - OLLAMA_HOST=http://ollama:11434
    command: |
      "echo 'ðŸ“¥ Downloading LLM model...' && \
       ollama pull ${LLM_MODEL:-phi3:medium} && \
       echo 'âœ… Model downloaded successfully'"
    networks:
      - datalive-net

  # N8N Auto-configuration
  n8n-setup:
    image: alpine:latest
    container_name: datalive-n8n-setup
    depends_on:
      n8n:
        condition: service_healthy
    env_file: .env
    volumes:
      - ./init-automated-configs/n8n:/scripts:ro
      - ./datalive_agent/n8n_workflows:/workflows:ro
    command: sh -c "apk add --no-cache curl jq && /scripts/setup.sh"
    networks:
      - datalive-net

  # Final System Health Check
  healthcheck:
    image: alpine:latest
    container_name: datalive-healthcheck
    depends_on:
      datalive_agent:
        condition: service_healthy
      postgres-init:
        condition: service_completed_successfully
      neo4j-init:
        condition: service_completed_successfully
      qdrant-init:
        condition: service_completed_successfully
      n8n-setup:
        condition: service_completed_successfully
    volumes:
      - ./init-automated-configs/healthcheck:/scripts:ro
    command: sh -c "apk add --no-cache curl netcat-openbsd jq && /scripts/verify.sh"
    networks:
      - datalive-net

# =============================================================================
# Networks
# =============================================================================

networks:
  datalive-net:
    driver: bridge

# =============================================================================
# Volumes
# =============================================================================

volumes:
  postgres-data:
  neo4j-data:
  qdrant-data:
  minio-data:
  ollama-data:
  n8n-data: