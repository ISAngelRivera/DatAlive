{
  "name": "Test Ollama Embeddings",
  "nodes": [
    {
      "parameters": {},
      "id": "start-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare test texts for embedding\nconst testTexts = [\n  \"Este es un documento de prueba sobre DataLive.\",\n  \"N8N es una herramienta de automatizaciÃ³n de workflows.\",\n  \"Qdrant es una base de datos vectorial para embeddings.\"\n];\n\nreturn testTexts.map((text, index) => ({\n  text,\n  test_id: index + 1\n}));"
      },
      "id": "prepare-texts",
      "name": "Prepare Test Texts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "model": "nomic-embed-text:v1.5",
        "action": "embeddings",
        "prompt": "={{$json.text}}",
        "options": {}
      },
      "id": "generate-embedding",
      "name": "Generate Embedding",
      "type": "n8n-nodes-base.ollama",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "ollamaApi": {
          "id": "{{OLLAMA_CREDENTIAL_ID}}"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Test: Ollama Embeddings\nconst embeddings = $input.all();\nlet totalTests = 0;\nlet passedTests = 0;\n\nconst results = embeddings.map(item => {\n  totalTests++;\n  const hasEmbedding = item.json.embedding && Array.isArray(item.json.embedding);\n  const validDimensions = hasEmbedding && item.json.embedding.length === 768;\n  \n  if (hasEmbedding && validDimensions) {\n    passedTests++;\n  }\n  \n  return {\n    test_id: item.json.test_id,\n    text: item.json.text,\n    has_embedding: hasEmbedding,\n    dimensions: hasEmbedding ? item.json.embedding.length : 0,\n    status: (hasEmbedding && validDimensions) ? \"PASS\" : \"FAIL\"\n  };\n});\n\nreturn {\n  test_name: \"Ollama Embeddings\",\n  overall_status: passedTests === totalTests ? \"PASS\" : \"FAIL\",\n  passed: passedTests,\n  total: totalTests,\n  results: results,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "test-result",
      "name": "Test Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Prepare Test Texts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Test Texts": {
      "main": [
        [
          {
            "node": "Generate Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embedding": {
      "main": [
        [
          {
            "node": "Test Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {}
}