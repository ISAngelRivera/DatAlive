{
  "name": "Test RAG Pipeline",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "test-rag",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "rag-webhook",
      "name": "RAG Test Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "test-rag-endpoint"
    },
    {
      "parameters": {
        "jsCode": "// Validate input and prepare query\nconst query = $json.query || \"¿Qué es DataLive?\";\n\nif (!query.trim()) {\n  throw new Error(\"Query is required\");\n}\n\nreturn {\n  original_query: query,\n  processed_query: query.trim(),\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "model": "nomic-embed-text:v1.5",
        "action": "embeddings",
        "prompt": "={{$json.processed_query}}",
        "options": {}
      },
      "id": "generate-query-embedding",
      "name": "Generate Query Embedding",
      "type": "n8n-nodes-base.ollama",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "ollamaApi": {
          "id": "{{OLLAMA_CREDENTIAL_ID}}"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://qdrant:6333/collections/documents/points/search",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"vector\": {{JSON.stringify($json.embedding)}},\n  \"limit\": 3,\n  \"with_payload\": true,\n  \"score_threshold\": 0.7\n}",
        "options": {}
      },
      "id": "search-documents",
      "name": "Search Documents",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300],
      "credentials": {
        "qdrantApi": {
          "id": "{{QDRANT_CREDENTIAL_ID}}"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build context from search results\nconst searchResults = $json.result || [];\nconst query = $('Validate Input').item(0).json.processed_query;\n\nif (searchResults.length === 0) {\n  return {\n    query: query,\n    context: \"No se encontraron documentos relevantes.\",\n    sources: [],\n    num_results: 0\n  };\n}\n\nconst context = searchResults\n  .map((result, index) => {\n    const payload = result.payload || {};\n    return `[${index + 1}] ${payload.text || 'Sin contenido'}`;\n  })\n  .join('\\n\\n');\n\nconst sources = searchResults.map(result => ({\n  score: result.score,\n  source: result.payload?.source || 'unknown',\n  id: result.id\n}));\n\nreturn {\n  query: query,\n  context: context,\n  sources: sources,\n  num_results: searchResults.length\n};"
      },
      "id": "build-context",
      "name": "Build Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "model": "phi-4:latest",
        "action": "chat",
        "prompt": "=Eres un asistente experto en DataLive, un sistema RAG para automatización de workflows.\n\nContexto relevante:\n{{$json.context}}\n\nPregunta del usuario: {{$json.query}}\n\nInstrucciones:\n1. Responde basándote únicamente en el contexto proporcionado\n2. Si no hay información suficiente, dilo claramente\n3. Sé conciso y útil\n4. Responde en español\n\nRespuesta:",
        "options": {
          "temperature": 0.3,
          "maxTokens": 500
        }
      },
      "id": "generate-response",
      "name": "Generate Response",
      "type": "n8n-nodes-base.ollama",
      "typeVersion": 1,
      "position": [1340, 300],
      "credentials": {
        "ollamaApi": {
          "id": "{{OLLAMA_CREDENTIAL_ID}}"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format final response\nconst response = $json.response || \"Lo siento, no pude generar una respuesta.\";\nconst context = $('Build Context').item(0).json;\n\nreturn {\n  query: context.query,\n  response: response,\n  sources: context.sources,\n  num_sources: context.num_results,\n  timestamp: new Date().toISOString(),\n  status: \"success\"\n};"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json, null, 2)}}",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "RAG Test Webhook": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Generate Query Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Query Embedding": {
      "main": [
        [
          {
            "node": "Search Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Documents": {
      "main": [
        [
          {
            "node": "Build Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Context": {
      "main": [
        [
          {
            "node": "Generate Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Response": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {}
}