{
    "name": "RAG Query Router",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "query",
          "responseMode": "responseNode",
          "options": {
            "rawBody": false
          }
        },
        "id": "webhook-receiver",
        "name": "Query Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1.1,
        "position": [250, 300],
        "webhookId": "rag-query-endpoint"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "={{$env.POSTGRES_HOST}}/rest/query",
          "authentication": "genericCredential",
          "genericAuthType": "httpBasicAuth",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "INSERT INTO monitoring.query_logs (query_text, user_id, session_id, created_at) VALUES ('{{$json.query}}', '{{$json.userId}}', '{{$json.sessionId}}', NOW()) RETURNING log_id"
              }
            ]
          }
        },
        "id": "log-query",
        "name": "Log Query",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [450, 300],
        "credentials": {
          "httpBasicAuth": {
            "id": "{{POSTGRES_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "key": "query:{{$json.query}}:{{$json.userId}}",
          "operation": "get"
        },
        "id": "cache-check",
        "name": "Check Cache",
        "type": "@n8n/n8n-nodes-redis.redis",
        "typeVersion": 1,
        "position": [650, 200],
        "credentials": {
          "redis": {
            "id": "{{REDIS_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json.value}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "cache-hit-check",
        "name": "Cache Hit?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [850, 300]
      },
      {
        "parameters": {
          "prompt": "Analyze the following query and classify its intent. Return a JSON with: {\"intent\": \"search|question|command\", \"entities\": [], \"complexity\": \"simple|complex\", \"requires_context\": true/false}\n\nQuery: {{$json.query}}",
          "model": "{{$env.OLLAMA_LLM_PRIMARY}}",
          "options": {
            "temperature": 0.3,
            "response_format": { "type": "json_object" }
          }
        },
        "id": "classify-intent",
        "name": "Classify Intent",
        "type": "@n8n/n8n-nodes-ollama.ollama",
        "typeVersion": 1,
        "position": [1050, 400],
        "credentials": {
          "ollamaApi": {
            "id": "{{OLLAMA_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "model": "{{$env.OLLAMA_EMBED_TEXT_PRIMARY}}",
          "prompt": "search_query: {{$json.query}}"
        },
        "id": "generate-embedding",
        "name": "Generate Query Embedding",
        "type": "@n8n/n8n-nodes-ollama.ollama",
        "typeVersion": 1,
        "position": [1250, 400],
        "credentials": {
          "ollamaApi": {
            "id": "{{OLLAMA_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "operation": "search",
          "collection": "documents",
          "vector": "={{$json.embedding}}",
          "limit": 5,
          "withPayload": true,
          "scoreThreshold": 0.7
        },
        "id": "vector-search",
        "name": "Search Qdrant",
        "type": "@n8n/n8n-nodes-qdrant.qdrant",
        "typeVersion": 1,
        "position": [1450, 400],
        "credentials": {
          "qdrantApi": {
            "id": "{{QDRANT_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Build context from search results\nconst results = $input.all();\nconst query = $node[\"webhook-receiver\"].json.query;\nconst intent = $node[\"classify-intent\"].json;\n\n// Extract and rank contexts\nconst contexts = results.map(r => ({\n  content: r.json.payload.content,\n  score: r.json.score,\n  metadata: r.json.payload.metadata\n}));\n\n// Build context string\nconst contextString = contexts\n  .sort((a, b) => b.score - a.score)\n  .slice(0, 3)\n  .map((c, i) => `[Context ${i+1} - Score: ${c.score.toFixed(2)}]\\n${c.content}`)\n  .join('\\n\\n');\n\nreturn {\n  query,\n  intent,\n  context: contextString,\n  sources: contexts.map(c => c.metadata),\n  resultCount: results.length\n};"
        },
        "id": "build-context",
        "name": "Build Context",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1650, 400]
      },
      {
        "parameters": {
          "model": "{{$env.OLLAMA_LLM_PRIMARY}}",
          "prompt": "You are a helpful AI assistant with access to a company knowledge base. Answer the user's question based on the provided context. If the context doesn't contain relevant information, say so clearly.\n\nContext:\n{{$json.context}}\n\nUser Question: {{$json.query}}\n\nProvide a clear, accurate, and helpful response:",
          "options": {
            "temperature": "={{$env.OLLAMA_LLM_TEMPERATURE}}",
            "maxTokens": "={{$env.OLLAMA_LLM_MAX_TOKENS}}"
          }
        },
        "id": "generate-response",
        "name": "Generate Response",
        "type": "@n8n/n8n-nodes-ollama.ollama",
        "typeVersion": 1,
        "position": [1850, 400],
        "credentials": {
          "ollamaApi": {
            "id": "{{OLLAMA_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "key": "query:{{$node[\"webhook-receiver\"].json.query}}:{{$node[\"webhook-receiver\"].json.userId}}",
          "value": "={{JSON.stringify({response: $json.response, sources: $node[\"build-context\"].json.sources, timestamp: new Date().toISOString()})}}",
          "expire": true,
          "ttl": 3600
        },
        "id": "cache-response",
        "name": "Cache Response",
        "type": "@n8n/n8n-nodes-redis.redis",
        "typeVersion": 1,
        "position": [2050, 400],
        "credentials": {
          "redis": {
            "id": "{{REDIS_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "method": "PATCH",
          "url": "={{$env.POSTGRES_HOST}}/rest/query",
          "authentication": "genericCredential",
          "genericAuthType": "httpBasicAuth",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "UPDATE monitoring.query_logs SET total_time_ms = {{$json.totalTime}}, cache_hit = {{$json.cacheHit}}, route_taken = '{{$json.route}}' WHERE log_id = '{{$node[\"log-query\"].json.log_id}}'"
              }
            ]
          }
        },
        "id": "update-metrics",
        "name": "Update Metrics",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [2250, 300],
        "credentials": {
          "httpBasicAuth": {
            "id": "{{POSTGRES_CREDENTIAL_ID}}"
          }
        }
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{JSON.stringify({\n  success: true,\n  query: $node[\"webhook-receiver\"].json.query,\n  response: $json.response || JSON.parse($node[\"cache-check\"].json.value).response,\n  sources: $json.sources || JSON.parse($node[\"cache-check\"].json.value).sources,\n  cached: $node[\"cache-hit-check\"].json.value ? true : false,\n  processingTime: Date.now() - $node[\"webhook-receiver\"].json.timestamp\n})}}",
          "options": {
            "responseCode": 200,
            "responseHeaders": {
              "entries": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            }
          }
        },
        "id": "send-response",
        "name": "Send Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [2450, 300]
      }
    ],
    "connections": {
      "webhook-receiver": {
        "main": [[{"node": "log-query", "type": "main", "index": 0}]]
      },
      "log-query": {
        "main": [[{"node": "cache-check", "type": "main", "index": 0}]]
      },
      "cache-check": {
        "main": [[{"node": "cache-hit-check", "type": "main", "index": 0}]]
      },
      "cache-hit-check": {
        "main": [
          [{"node": "send-response", "type": "main", "index": 0}],
          [{"node": "classify-intent", "type": "main", "index": 0}]
        ]
      },
      "classify-intent": {
        "main": [[{"node": "generate-embedding", "type": "main", "index": 0}]]
      },
      "generate-embedding": {
        "main": [[{"node": "vector-search", "type": "main", "index": 0}]]
      },
      "vector-search": {
        "main": [[{"node": "build-context", "type": "main", "index": 0}]]
      },
      "build-context": {
        "main": [[{"node": "generate-response", "type": "main", "index": 0}]]
      },
      "generate-response": {
        "main": [[{"node": "cache-response", "type": "main", "index": 0}]]
      },
      "cache-response": {
        "main": [[{"node": "update-metrics", "type": "main", "index": 0}]]
      },
      "update-metrics": {
        "main": [[{"node": "send-response", "type": "main", "index": 0}]]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "error-handler"
    },
    "staticData": null,
    "meta": {
      "templateId": "rag-query-router"
    },
    "pinData": {},
    "versionId": "1.0.0",
    "triggerCount": 1
  }